<?xml version="1.0"?>
<!-- 
  This is a multi-root schema definition.  It will validate any one of the
  top-level das2.3 headers, <stream>, <packet>, <comment> or <exception>.
  Of course to be well-formed only *one* of the elements above may be at the
  root of the document.  
-->   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" >

<!-- Stream headers ======================================================= -->

<!-- The data types or stream version attribute -->
<xs:simpleType name="StreamVersion">
  <xs:restriction base="xs:string">
    <xs:enumeration value="2.3" />
  </xs:restriction>  
</xs:simpleType>

<!-- The data types for properties -->
<xs:simpleType name="PropType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="String" />
    <xs:enumeration value="Datum" />
    <xs:enumeration value="boolean" />
    <xs:enumeration value="int" />
    <xs:enumeration value="double" />
    <xs:enumeration value="DatumRange" />
    <xs:enumeration value="doubleRange" />
   </xs:restriction>
</xs:simpleType>

<!-- The names for properties, no spaces, may include special chars ".,-_:" -->
<xs:simpleType name="PropName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\.-,:]+"/>
  </xs:restriction>
</xs:simpleType>

<!-- Single property -->
<xs:complexType name="Property">
  <xs:simpleContent>
    <xs:extension base="xs:string" >
      <xs:attribute name="name" type="PropName" use="required" />
      <xs:attribute name="type" type="PropType" default="String" />
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<!-- Properties grouping -->
<xs:complexType name="Properties">
  <xs:sequence>
    <xs:element name="p" type="Property" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
</xs:complexType>


<!-- There may be at most one properies child.  Other elements can occur as often as they
     like.  Note that this does not cach a misspelled properites tag. -->
<xs:element name="stream">
<xs:complexType>
    <xs:sequence>
      <xs:element name="properties" type="Properties" minOccurs="0" maxOccurs="1"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <!-- You can add other tags here, but they can't be from the das2 namespace -->
          <xs:any namespace="##other" processContents="skip" />
          <xs:any namespace="##local" processContents="skip" />
        </xs:choice>
    </xs:sequence>
    <xs:attribute name="version" type="StreamVersion" use="required" />
    <xs:anyAttribute processContents="skip" />
  </xs:complexType>
</xs:element>


<!-- Paacket Headers ====================================================== -->

<!-- The purposes for values -->
<xs:simpleType name="PlaneRole">
  <xs:restriction base="xs:string">
    <xs:enumeration value="center" />
    <xs:enumeration value="average" />
    <xs:enumeration value="min" />
    <xs:enumeration value="max" />
    <xs:enumeration value="width" />
    <xs:enumeration value="std_dev" />
    <xs:enumeration value="min_error" />
    <xs:enumeration value="max_error" />    
  </xs:restriction>
</xs:simpleType>

<!-- Plane Names -->
<xs:simpleType name="VarName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\.]+"/>
   </xs:restriction>
</xs:simpleType>

<!-- Value Types -->
<xs:simpleType name="StorageType">
  <xs:restriction base="xs:string">
      <xs:pattern 
value="big_endian_real[48]|little_endian_real[48]|big_endian_int8|little_endian_int8|ascii[1-9][0-9]*|time[1-9][0-9]*" />
   </xs:restriction>
</xs:simpleType>


<!-- Single Value Per Row Plane -->
<xs:complexType name="Ref">
  <xs:sequence minOccurs="0">
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:element name="plane" type="Plane" minOccurs="0" maxOccurs="8"/>
    <!-- Can extend with other elements here, but they can't be from this namespace -->
    <xs:any namespace="##other" processContents="skip" minOccurs="0"/>
    <xs:any namespace="##local" processContents="skip" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="VarName" use="required" />
  <xs:attribute name="type" type="StorageType"  use="required" />
  <xs:attribute name="units" type="xs:token"  use="required" />
  <xs:attribute name="role" type="PlaneRole"  default="center" />
</xs:complexType>

<xs:simpleType name="Array">
  <xs:restriction base="xs:string">
    <xs:pattern value="[0-9\+-,\.eE\s]*" />
    <xs:whiteSpace value="collapse" />
  </xs:restriction>
</xs:simpleType>

<!-- The regex for scientific notation is looooong, just make sure
     illegal characters are not present -->       
<xs:complexType name="Offset">
  <xs:simpleContent>
    <xs:extension base="Array" >
      <xs:attribute name="units" type="xs:token" use="required" />
      <xs:attribute name="min" type="xs:double" />
      <xs:attribute name="max" type="xs:double" />
      <xs:attribute name="interval" type="xs:double" />
      <xs:attribute name="role" type="PlaneRole"  default="center" />
    </xs:extension>
  </xs:simpleContent>  
</xs:complexType>

<xs:complexType name="Plane" >
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="role" type="PlaneRole" use="required" />
  <xs:attribute name="units" type="xs:token" use="required" />
</xs:complexType>

<!-- Multi Value Per Row, Spanning 1 Coordinate -->
<xs:complexType name="YDat">
  <xs:sequence minOccurs="0">
    <xs:element name="xoffset" type="Offset" minOccurs="0" maxOccurs="8"/>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:element name="plane" type="Plane" minOccurs="0" maxOccurs="8"/>
    <!-- Can extend with other elements here, but they can't be from this namespace -->
    <xs:any namespace="##other" processContents="skip" minOccurs="0"/>
    <xs:any namespace="##local" processContents="skip" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="VarName" use="required" />
  <xs:attribute name="group" type="VarName" />
  <xs:attribute name="type" type="StorageType"  use="required" />
  <xs:attribute name="units" type="xs:token"  use="required" />
  <xs:attribute name="role" type="PlaneRole"  default="center" />
  <xs:attribute name="nitems" type="xs:positiveInteger" default="1" />
</xs:complexType>

<!-- Multi Value Per Row, Spanning 2 Coordinates -->
<xs:complexType name="ZDat">
  <xs:sequence>
    <xs:element name="xoffset" type="Offset" minOccurs="0" maxOccurs="8"/>
    <xs:element name="yoffset" type="Offset" minOccurs="0" maxOccurs="8"/>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:element name="plane" type="Plane" minOccurs="0" maxOccurs="8"/>
    <!-- Can extend with other elements here, but they can't be from this namespace -->
    <xs:any namespace="##other" processContents="skip" minOccurs="0"/>
    <xs:any namespace="##local" processContents="skip" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="VarName" use="required" />
  <xs:attribute name="group" type="VarName" />
  <xs:attribute name="type" type="StorageType"  use="required" />
  <xs:attribute name="units" type="xs:token"  use="required" />
  <xs:attribute name="role" type="PlaneRole"  default="center" />
  <xs:attribute name="nitems" type="xs:positiveInteger" default="1" />
</xs:complexType>


<!-- Multi Value Per Row, Spanning 3 Coordinates -->
<xs:complexType name="WDat">
  <xs:sequence>
    <xs:element name="xoffset" type="Offset" minOccurs="0" maxOccurs="8"/>
    <xs:element name="yoffset" type="Offset" minOccurs="0" maxOccurs="8" />
    <xs:element name="zoffset" type="Offset" minOccurs="0" maxOccurs="8"/>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:element name="plane" type="Plane" minOccurs="0" maxOccurs="8"/>
    <!-- Can extend with other elements here, but they can't be from this namespace -->
    <xs:any namespace="##other" processContents="skip" minOccurs="0"/>
    <xs:any namespace="##local" processContents="skip" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="VarName" use="required" />
  <xs:attribute name="group" type="VarName" />
  <xs:attribute name="type" type="StorageType"  use="required" />
  <xs:attribute name="units" type="xs:token"  use="required" />
  <xs:attribute name="role" type="PlaneRole"  default="center" />
  <xs:attribute name="nitems" type="xs:positiveInteger" default="1" />
</xs:complexType>


<xs:element name="packet">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="xref" type="Ref" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element name="yref" type="Ref" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="zref" type="Ref" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ydat" type="YDat" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="zdat" type="ZDat" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="wdat" type="WDat" minOccurs="0" maxOccurs="unbounded"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
      <!-- Can extend with other elements here, but they can't be from this namespace -->
      <xs:any namespace="##other" processContents="skip" minOccurs="0"/>
      <xs:any namespace="##local" processContents="skip" minOccurs="0"/>
      </xs:choice>
    </xs:sequence>
  
    <!-- Can extend with other attributes, will be skipped by schema -->
    <xs:anyAttribute processContents="skip" />
  </xs:complexType>
</xs:element>

<!-- Exceptions =========================================================== -->

<xs:element name="exception">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:string" >
        <xs:attribute name="type" type="xs:token" use="required"/>
        
        <!-- Can extend with other attributes, will be skipped by schema -->
        <xs:anyAttribute processContents="skip" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- Comments ============================================================= -->

<xs:element name="comment">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:string" >
        <xs:attribute name="type" type="xs:token" use="required"/>
        <xs:attribute name="source" type="xs:normalizedString"/>
       
        <!-- Can extend with other attributes, will be skipped by schema -->
        <xs:anyAttribute processContents="skip" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

</xs:schema>
