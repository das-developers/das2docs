#!/usr/bin/env python3

import sys

from lxml import etree
try:
    from StringIO import StringIO # Python 2
except ImportError:
    from io import StringIO       # Python 3
	 
g_sSchema = './schema/das2.3.xsd'
#g_sPktSchema = './schema/das2_packet-2.3.xsd'
#g_sCmtSchema = './schema/das2_comment-2.3.xsd'

# ########################################################################### #
def getHdr(fIn, nOffset):
	"""Returns (sPktId, sDoc, nOffset)"""

	x4 = fIn.read(4)
	nOffset += 4

	if (nOffset == 0) and (x4 != b'[00]'):
		print("File does not start with '[00]' does not appear to be a das2 stream")
		return 1
	
	try:
		sPktId = x4[1:3].decode("utf-8")
		if sPktId == "00": sPktType = "stream"
		elif sPktId in ('xx','XX'): sPktType = "comment"
		else: sPktType = "packet"
			
	except UnicodeDecodeError:
		print("Packet ID not readable as UTF-8 text at byte offset %d"%(nOffset - 4))
		return (None, None, nOffset, None)
	
	x6 = fIn.read(6)
	nOffset += 6
	if len(x6) != 6:
		print("Could not get header packet length at byte offset %d"%(nOffest - 6 ))
		return (sPktId, None, nOffset, sPktType)
			
	nLen = 0
	try:
		nLen = int(x6.decode('utf-8'), 10)
	except ValueError:
		print("Could not convert header packet length string to an integer at byte offset %d"%(
		       nOffset - 6))
		return (sPktId, None, nOffset, sPktType)
		
	if nLen < 8:
		print("Packet length (%d) is to short to be a legal stream "%nLen +\
		      "or packet descriptor at byte offset %d"%nOffset)
		return (sPktId, None, nOffset, sPktType)
	
	#print("Reading %d byte %s header packet"%(nLen, sPktType))
	xDoc = fIn.read(nLen)
	sDoc = None
	try:
		sDoc = xDoc.decode("utf-8")
		#print(sDoc)
	except UnicodeDecodeError:
		print("%s header starting at byte %d is not valid UTF-8 text"(sPktType, nOffset))
		return (sPktId, None, nOffset, sPktType)
	
	return (sPktId, sDoc, nOffset, sPktType)


# ########################################################################### #
def main(lArgs):


	print("Reading XSD: %s"%g_sSchema)
	fSchema = open(g_sSchema)
	schema_doc = etree.parse(fSchema)
	schema = etree.XMLSchema(schema_doc)
	
	print("Validating: %s"%lArgs[1])
	fIn = open(lArgs[1], 'rb')
	
	while True:
	
		sPktId, sDoc, nOffset, sType = getHdr(fIn, 0)
		if sDoc == None: 
			break
			
		fPkt = StringIO(sDoc)
		doc = etree.parse(fPkt)
		
		bGood = False
		try:
			schema.assertValid(doc)
			bGood = True
		except etree.DocumentInvalid as e:
			print("In %s header: %s" %(sType, str(e)))
			return 5
	
		if bGood:
			print("%s: <%s> [OKAY]"%(lArgs[1], sType))
			
		else:
			print("%s: <%s>  [FAILED]"%(lArgs[1], sType))
			return 7
		
	
	print("%s: validates as a das2.3 stream"%lArgs[1])
	return 0	
	
if __name__ == "__main__":
	sys.exit(main(sys.argv))
