#!/usr/bin/env python3

import sys
import xml.parsers.expat
from lxml import etree

# ########################################################################### #

class Das22Parser:
	"""Deal with original das2's bad choices on properties elements.  Convert
	a single properties element into a container with sub elements so that
	it can be checked by schema documents
	"""

	def __init__(self, bVerbose=False):
		self._builder = etree.TreeBuilder() # Save the parse tree here
		
		psr = xml.parsers.expat.ParserCreate('UTF-8') # Don't use namesapaces!
		psr.StartElementHandler  = self._elBeg
		psr.EndElementHandler    = self._elEnd
		psr.CharacterDataHandler = self._elData
		
		self._parser = psr
		self._level = 0
		self._bVerbose = bVerbose
			
	def _elBeg(self, sName, dAttrs):
		# If we are beginning a properties element, then turn the attributes
		# into individual properties
		
		if self._bVerbose:
			print("%s%s["%("  "*self._level, sName))
			self._level += 1
		
		if sName != 'properties':
			if self._bVerbose: print("%s%s"%("  "*self._level, dAttrs))
			return self._builder.start(sName, dAttrs)
		
		# Break out weird properity attributes into sub elements
		self._builder.start('properties', {})
		
		for sKey in dAttrs:
			d = {'name':None}
			v = dAttrs[sKey]
			
			if ':' in sKey:
				l = [s.strip() for s in sKey.split(':')]
				
				if len(l) != 2 or (len(l[0]) == 0) or (len(l[1]) == 0):
					raise ValueError(
						"Malformed <property> attribute '%s' at line %d, column %d"%(
						sKey, self._parser.ErrorLineNumber, 
						self._parser.ErrorColumnNumber
					))
				
				d['name'] = l[1]
				if l[0] != 'String': # Strings are the default, drop the type
					d['type'] = l[0]
				
			else:
				d['name'] = sKey
					
			self._elBeg('p', d)
			self._elData(dAttrs[sKey])
			self._elEnd('p')
	
	def _elData(self, sData):
		sData = sData.strip()
		
		if self._bVerbose:
			lLines = [s.strip() for s in sData.split('\n')]	
			for sLine in lLines:
				if len(sLine) > 0:
					print("%s%s"%("  "*self._level, sLine.strip()))
		
		self._builder.data(sData)
	
	def _elEnd(self, sName):
		if self._bVerbose: 
			self._level -= 1
			print("%s]"%("  "*self._level))
			
		return self._builder.end(sName)
		
	def parse(self, fIn):
		if hasattr(fIn, 'read'):
			self._parser.ParseFile(fIn)
		else:
			self._parser.Parse(fIn, 1)
			
		elRoot = self._builder.close()
		return etree.ElementTree(elRoot)

# ########################################################################### #
def main(argv):

	sText='''<stream compression="none" version="2.2" >
  <properties Datum:xTagWidth="128.000000 s"
              double:zFill="-1.000000e+31"
              String:sourceId="das2_from_tagged_das1"/>
</stream>
'''

	sText2='''<packet>
  <x name="" type="time24" units="UTC">
  </x>
  <yscan name="amplitude" type="ascii11" zUnits="V**2 m**-2 Hz**-1" yUnits="Hz" nitems="119" 
         yTags="3.3125e+05,3.4375e+05,3.5625e+05,3.6875e+05,3.8125e+05,3.9375e+05,4.0625e+05,4.1875e+05,4.3125e+05,4.4375e+05,4.5625e+05,4.6875e+05,4.8125e+05,4.9375e+05,5.0625e+05,5.1875e+05,5.3125e+05,5.4375e+05,5.5625e+05,5.6875e+05,5.8125e+05,5.9375e+05,6.0625e+05,6.1875e+05,6.3125e+05,6.4375e+05,6.5625e+05,6.6875e+05,6.8125e+05,6.9375e+05,7.0625e+05,7.1875e+05,7.3125e+05,7.4375e+05,7.5625e+05,7.6875e+05,7.8125e+05,7.9375e+05,8.0625e+05,8.1875e+05,8.3125e+05,8.4375e+05,8.5625e+05,8.6875e+05,8.8125e+05,8.9375e+05,9.0625e+05,9.1875e+05,9.3125e+05,9.4375e+05,9.5625e+05,9.6875e+05,9.8125e+05,9.9375e+05,1.0062e+06,1.0188e+06,1.0312e+06,1.0438e+06,1.0562e+06,1.0688e+06,1.0812e+06,1.0938e+06,1.1062e+06,1.1188e+06,1.1312e+06,1.1438e+06,1.1562e+06,1.1688e+06,1.1812e+06,1.1938e+06,1.2062e+06,1.2188e+06,1.2312e+06,1.2438e+06,1.2562e+06,1.2688e+06,1.2812e+06,1.2938e+06,1.3062e+06,1.3188e+06,1.3312e+06,1.3438e+06,1.3562e+06,1.3688e+06,1.3812e+06,1.3938e+06,1.4062e+06,1.4188e+06,1.4312e+06,1.4438e+06,1.4562e+06,1.4688e+06,1.4812e+06,1.4938e+06,1.5062e+06,1.5188e+06,1.5312e+06,1.5438e+06,1.5562e+06,1.5688e+06,1.5812e+06,1.5938e+06,1.6062e+06,1.6188e+06,1.6312e+06,1.6438e+06,1.6562e+06,1.6688e+06,1.6812e+06,1.6938e+06,1.7062e+06,1.7188e+06,1.7312e+06,1.7438e+06,1.7562e+06,1.7688e+06,1.7812e+06,1.7938e+06,1.8062e+06">
  </yscan>
</packet>
'''
	
	psr = Das22Parser()
	doc = psr.parse(sText)
	#doc.write(sys.stdout.buffer, pretty_print=True)

	print(etree.tostring(doc, pretty_print=True).decode())
	return 0


# ########################################################################### #
if __name__ == "__main__":
	sys.exit(main(sys.argv))
